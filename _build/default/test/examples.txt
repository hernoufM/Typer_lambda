(* Liste
    (λx.[(0+x),(0-x),(λx.x) x]) 3*)
let lambda_ex = 
    create_app
        (create_abs "x"
            (create_liste
                [create_add
                    (create_int 0)
                    (create_var "x");
                create_sub
                    (create_int 0)
                    (create_var "x");
                create_app
                    (create_abs "x"
                        (create_var "x"))
                    (create_var "x")]))
        (create_int 3)

(* Add/Sub
    (λx.λy.(((λx.λy.x) x y) + (λx.λy.y) x y) ) 7 5 *)
let lambda_ex = 
    create_app
        (create_app
            (create_abs "x"
                (create_abs "y"
                    (create_sub
                        (create_app
                            (create_app
                                (create_abs "x"
                                    (create_abs "y"
                                        (create_var "x")))
                                (create_var "x"))
                            (create_var "y"))
                        (create_app
                            (create_app
                                (create_abs "x"
                                    (create_abs "y"
                                        (create_var "y")))
                                (create_var "x"))
                            (create_var "y")))))
            (create_int 7))
        (create_int 5);;

(*  Head Tail Cons
    (λx.(cons ((λx.x) 3) (cons (head x) (tail x)))) [1]*)
let lambda_ex = 
    create_app
        (create_abs "x"
            (create_cons 
                (create_app
                    (create_abs "x"
                        (create_var "x"))
                    (create_int 3))
                (create_cons
                    (create_head
                        (create_var "x"))
                    (create_tail
                        (create_var "x")))))
        (create_liste [create_int 1])

(*  if_zero then else           OK
    (if_zero ((λx.x 1) - 1) then 5 else (head [])) *)
let lambda_ex = 
    create_ifZte
        (create_sub
            (create_app
                (create_abs "x"
                    (create_var "x"))
                (create_int 1))
            (create_int 1))
        (create_int 5)
        (create_head
            (create_liste []))

(*  if_zero then else           KO
    (if_zero ((λx.x 1) - 1) then 5 else (head [])) *)
let lambda_ex = 
    create_ifZte
        (create_sub
            (create_app
                (create_abs "x"
                    (create_var "x"))
                (create_int 1))
            (create_int 1))
        (create_int 5)
        (create_head
            (create_liste [create_abs "x" (create_var "x")]))

(*  if_empty then else
    (if_empty (tail [1]) then 5 else (head [])) *)
let lambda_ex = 
    create_ifEte
        (create_tail
            (create_liste [create_int 1]))
        (create_int 5)
        (create_head
            (create_liste []))

(*  Fix (sum of first 100 )
    (fix (λsum.λx.if_zero x then 0 else ((sum (x-1))+ x))) 100 *)
let lambda_ex = 
    create_app
        (create_fix
            (create_abs "sum"
                (create_abs "x"
                    (create_ifZte
                        (create_var "x")
                        (create_int 0)
                        (create_add
                            (create_app
                                (create_var "sum")
                                (create_sub
                                    (create_var "x")
                                    (create_int 1)))
                            (create_var "x"))))))
        (create_int 100);;

(*  Let     1
    let x = (head [4]) in (λx.(x+x)) x *)
let lambda_ex = 
    create_let "x"
        (create_head
            (create_liste
                [create_int 4]))
        (create_app
            (create_abs "x"
                (create_add
                    (create_var "x")
                    (create_var "x")))
            (create_var "x"))

(*  Let     2
    let f = (λx.x) in (f f) 3 *)
let lambda_ex = 
    create_let "f"
        (create_abs "x"
            (create_var "x"))
        (create_app
            (create_app 
                (create_var "f")
                (create_var "f"))
            (create_int 3));;

(*  Let     3
    let add = (λx.λy.x+y) in let add_3 = add 3 in add_3 5 *)
let lambda_ex = 
    create_let "add"
        (create_abs "x"
            (create_abs "y"
                (create_add
                    (create_var "x")
                    (create_var "y"))))
        (create_let "add_3"
            (create_app
                (create_var "add")
                (create_int 3))
            (create_app
                (create_var "add_3")
                (create_int 5)));;

(*  Let     4
    let add = (λx.λy.x+y) in let add_3 = add 3 in add_3 *)
let lambda_ex = 
    create_let "add"
        (create_abs "x"
            (create_abs "y"
                (create_add
                    (create_var "x")
                    (create_var "y"))))
        (create_let "add_3"
            (create_app
                (create_var "add")
                (create_int 3))
            (create_var "add_3"));;

(* Ref/Deref/Assign/Unit   
   let x = ref 2 in let y = ref 5 in let _ = x:=!x+8 in let _ = y=!y+2 in !x-!y;
   *)
let lambda_ex =
    create_let "x"
        (create_ref
            (create_int 2))
        (create_let "y"
            (create_ref
                (create_int 5))
            (create_let "_"
                (create_assign
                    (create_var "x")
                    (create_add
                        (create_deref
                            (create_var "x"))
                        (create_int 8)))
                (create_let "_"
                    (create_assign
                        (create_var "y")
                        (create_add
                            (create_deref
                                (create_var "y"))
                            (create_int 5)))
                    (create_sub
                        (create_deref
                            (create_var "x"))
                        (create_deref
                            (create_var "y"))))));;


(* 
   let l = [] in let l1 = (cons (λx.x) l) in  let l2 = (cons 5 l) in ((head l1) (head l2))
   *)
let lambda_ex =
    create_let "l"
        (create_liste [])
        (create_let "l1"
            (create_cons
                (create_abs "x"
                    (create_var "x"))
                (create_var "l"))
            (create_let "l2"
                (create_cons 
                    (create_int 5)
                    (create_var "l"))
                (create_app 
                    (create_head
                        (create_var "l1"))
                    (create_head
                        (create_var "l2")))));;

(* Rpoly faible (4.6)   ECHEC
   let l = ref [] in let _ = l:=[(λx.x)] in (head !l) + 2
   *)
let lambda_ex =
    create_let "l"
        (create_ref
            (create_liste []))
        (create_let "_"
            (create_assign
                (create_var "l")
                (create_liste
                    [create_abs "x"
                        (create_var "x")]))
            (create_add
                (create_head
                    (create_deref
                        (create_var "l")))
                (create_int 2)));;

(* Rpoly faible (4.6)   ECHEC
   let x = ref (λx.x) in let _ = x:=λx.(x+1) in (!x 5)
   *)
let lambda_ex =
    create_let "x"
        (create_ref 
            (create_abs "x"
                (create_var "x")))
        (create_let "_"
            (create_assign
                (create_var "x")
                (create_abs "x"
                    (create_add
                        (create_var "x")
                        (create_int 1))))
            (create_app
                (create_deref
                    (create_var "x"))
                (create_liste [])));;

(* Rpoly faible (4.6)   2
   let a = λx.λy.(x y) in let g = a (λx.x) in g 
   *)
let lambda_ex =
    create_let "a"
        (create_abs "x"
            (create_abs "y"
                (create_app
                    (create_var "x")
                    (create_var "y"))))
        (create_let "g"
            (create_app 
                (create_var "a")
                (create_abs "x"
                    (create_var "x")))
            (create_var "g"));;

(* Rpoly faible (4.6)   2_suite
   let a = λx.λy.(x y) in let g = a (λx.x) in let _ = g 5 in g
   *)
let lambda_ex =
    create_let "a"
        (create_abs "x"
            (create_abs "y"
                (create_app
                    (create_var "x")
                    (create_var "y"))))
        (create_let "g"
            (create_app 
                (create_var "a")
                (create_abs "x"
                    (create_var "x")))
            (create_let "_"
                (create_app
                    (create_var "g")
                    (create_int 5))
                (create_var "g")));;

(* λxyzt.((x (y t)) t) (z t) *)
let lambda_ex = 
    create_abs "x" 
        (create_abs "y" 
            (create_abs "z"
                (create_abs "t"
                    (create_app
                        (create_app
                            (create_app 
                                (create_var "x")
                                (create_app
                                    (create_var "y")
                                    (create_var "t")))
                            (create_var "t"))
                        (create_app
                            (create_var "z")
                            (create_var "t"))))));;

(* [i, i i, i i i, k i 5] *)
let lambda_ex = 
    create_liste
        [i;
        (create_app i i);
        (create_app (create_app i i) i);
        (create_app (create_app k i) (create_int 5))];;
